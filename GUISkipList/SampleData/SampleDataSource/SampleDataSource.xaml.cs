//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.SampleDataSource
{
	using System; 
	using System.ComponentModel;

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class SampleDataSource { }
#else

	public class SampleDataSource : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		public SampleDataSource()
		{
			try
			{
				Uri resourceUri = new Uri("/testing;component/SampleData/SampleDataSource/SampleDataSource.xaml", UriKind.RelativeOrAbsolute);
				System.Windows.Application.LoadComponent(this, resourceUri);
			}
			catch
			{
			}
		}

		private CollectionItemCollection _Collection = new CollectionItemCollection();

		public CollectionItemCollection Collection
		{
			get
			{
				return this._Collection;
			}
		}
	}

	public class CollectionItem : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private ComplexPropertyType _ComplexProperty = new ComplexPropertyType();

		public ComplexPropertyType ComplexProperty
		{
			get
			{
				return this._ComplexProperty;
			}

			set
			{
				if (this._ComplexProperty != value)
				{
					this._ComplexProperty = value;
					this.OnPropertyChanged("ComplexProperty");
				}
			}
		}
	}

	public class CollectionItemCollection : System.Collections.ObjectModel.ObservableCollection<CollectionItem>
	{ 
	}

	public class ComplexPropertyType : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private double _value = 0;

		public double value
		{
			get
			{
				return this._value;
			}

			set
			{
				if (this._value != value)
				{
					this._value = value;
					this.OnPropertyChanged("value");
				}
			}
		}
	}
#endif
}
